import { useEffect, useState } from "react";
import axios from "axios";

export default function StaffWorkPage() {
  const [orders, setOrders] = useState([]);
  const [filter, setFilter] = useState("today"); // today | week | all

  const user = JSON.parse(sessionStorage.getItem("user")) || {
    id: "68c55b7d8d0d6ec66353bce7",
    name: "Nguy·ªÖn VƒÉn A",
  };

  // L·∫•y t·∫•t c·∫£ order c·ªßa nh√¢n vi√™n
  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const res = await axios.get(`http://localhost:5000/api/orders/staff/${user.id}`);
        setOrders(res.data);
      } catch (err) {
        console.error("Fetch orders failed:", err);
      }
    };
    fetchOrders();
  }, [user.id]);

  // L·ªçc theo filter
  const filteredOrders = orders.filter((o) => {
    const date = new Date(o.scheduledAt);
    const today = new Date();
    if (filter === "today") {
      return date.toDateString() === today.toDateString();
    } else if (filter === "week") {
      const weekStart = new Date(today);
      weekStart.setDate(today.getDate() - today.getDay());
      const weekEnd = new Date(weekStart);
      weekEnd.setDate(weekStart.getDate() + 6);
      return date >= weekStart && date <= weekEnd;
    }
    return true; // all
  });

  // Badge tr·∫°ng th√°i
  const StatusBadge = ({ status }) => {
    const colors = {
      assigning: "bg-gray-100 text-gray-700",
      pending: "bg-yellow-100 text-yellow-700",
      accepted: "bg-blue-100 text-blue-700",
      in_progress: "bg-indigo-100 text-indigo-700",
      completed: "bg-green-100 text-green-700",
      canceled: "bg-red-100 text-red-700",
    };
    const labels = {
      assigning: "ƒêang ph√¢n c√¥ng",
      pending: "Ch·ªù x·ª≠ l√Ω",
      accepted: "ƒê√£ nh·∫≠n",
      in_progress: "ƒêang l√†m",
      completed: "Ho√†n th√†nh",
      canceled: "ƒê√£ h·ªßy",
    };
    return (
      <span className={`px-2 py-1 rounded text-xs font-medium ${colors[status] || "bg-gray-100 text-gray-600"}`}>
        {labels[status] || status}
      </span>
    );
  };

  return (
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-bold">
        üìã L·ªãch s·ª≠ l√†m vi·ªác c·ªßa <span className="text-blue-600">{user.name}</span>
      </h1>

      {/* Filter */}
      <div className="flex items-center gap-3">
        <label className="font-medium">Hi·ªÉn th·ªã:</label>
        <select
          className="border rounded p-2"
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
        >
          <option value="today">H√¥m nay</option>
          <option value="week">Tu·∫ßn n√†y</option>
          <option value="all">T·∫•t c·∫£ l·ªãch s·ª≠</option>
        </select>
      </div>

      {/* B·∫£ng l·ªãch s·ª≠ */}
      <div className="bg-white shadow-md rounded-lg overflow-hidden mt-4">
        <table className="w-full border-collapse">
          <thead className="bg-gray-100">
            <tr className="border-b">
              <th className="p-2 text-left">Kh√°ch h√†ng</th>
              <th className="p-2 text-left">D·ªãch v·ª•</th>
              <th className="p-2 text-left">Chi nh√°nh</th>
              <th className="p-2 text-left">Ng√†y & gi·ªù</th>
              <th className="p-2 text-left">Tr·∫°ng th√°i</th>
            </tr>
          </thead>
          <tbody>
            {filteredOrders.length > 0 ? (
              filteredOrders.map((o) => (
                <tr key={o._id} className="border-b hover:bg-gray-50">
                  <td className="p-2">{o.customer?.name || "‚Äî"}</td>
                  <td className="p-2">
                    {o.service?.name} {o.service?.price && `(${o.service.price.toLocaleString("vi-VN")}ƒë)`}
                  </td>
                  <td className="p-2">{o.branch?.name || "‚Äî"}</td>
                  <td className="p-2">{new Date(o.scheduledAt).toLocaleString("vi-VN")}</td>
                  <td className="p-2"><StatusBadge status={o.status} /></td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="5" className="text-center p-4 text-gray-500">
                  Kh√¥ng c√≥ l·ªãch s·ª≠
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
